import readline  # Enable tab completion
import subprocess
import os
import time
import itertools
import colorama
from colorama import Fore, Style

colorama.init()

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# Banner display function
def display_banner():
    os.system('clear')
    banner = "[*] Starting the PhantomProbe Framework"
    for char in banner:
        print(char, end='', flush=True)
        time.sleep(0.1)
    time.sleep(3)
    os.system('clear')
    print(Fore.GREEN + Style.BRIGHT + """
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚†ø‚†ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£á‚£Ä‚£Ä‚£ø‚£ø‚†Ä‚†Ä‚£Ä‚£º‚£ø‚¢Å‚£§‚£∂‚£ø‚£∂‚£∂‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∂‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°ø‚†õ‚†õ‚¢ª‚£ø‚£§‚£æ‚†ø‚†õ‚†Å‚†ô‚†ã‚†Å‚†Ä‚†Ä‚†â‚†ô‚†ª‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚†ü‚†â‚†Ä‚†â‚¢ª‚£ø‚£¶‚°Ä‚†Ä‚¢∏‚£ø‚†É‚†Ä‚†Ä‚£†‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚£†‚£ø‚†ã‚†π‚£ø‚£¶‚°ò‚†ü‚†Ä‚†Ä‚¢∞‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚†Ä‚†Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°ø‚†Å‚†Ä‚††‚£∂‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†à‚¢ª‚£∑‚°Ñ‚†Ä‚†Ä‚£º‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£º‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£∑‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚°ø‚†∂‚¢∂‚£∂‚£§‚£Ñ‚†à‚¢ª‚£∑‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£¶‚£¥‚£ø‚£∑‚£∂‚£¶‚£§‚£Ñ‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°ø‚†õ‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚†á‚†à‚†õ‚¢ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚°ø‚†ã‚†Å‚†Ä‚†Ä‚¢∏‚£ø‚†ô‚†ª‚£ø‚£Æ‚£ø‚°á‚¢Ä‚£¥‚£ø‚†ü‚†ã‚†â‚†Å‚†Ä‚†à‚†â‚†â‚†õ‚¢ø‚†ü‚¢Å‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£§‚£Ä‚†Ä‚†Ä‚£π‚£ø‚£∑‚°Ñ‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£á‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚†ø‚†ã‚†Ä‚£Ä‚£¥‚£ø‚£ø‚£∂‚£æ‚†ø‚†ø‚†ø‚¢ø‚£∂‚£¨‚°â‚†ô‚†ø‚£∑‚£æ‚°ø‚†É‚†ô‚£ø‚£Ü‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£Ä‚†Ä‚†Ä‚£¥‚£æ‚†ø‚†õ‚†ø‚¢ø‚£∂‚£§‚°Ä‚†Ä‚†Ä‚£æ‚°ø‚†à‚†õ‚†õ‚†ø‚†ø‚£ø‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚°ø‚†ü‚†õ‚†ã‚†Å‚†Ä‚†Ä‚£æ‚°á‚†Ä‚†Ä‚†à‚¢ª‚£∑‚°Ä‚†Ä‚†à‚†ª‚£∑‚£Ñ‚†Ä‚¢∏‚£ø‚†Ü
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†è‚†ô‚¢ø‚£¶‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†â‚£Ä‚£¥‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚£§‚£§‚°Ä‚†∞‚£ø‚£∑‚£§‚°Ä‚†Ä‚¢Ä‚£ª‚£∑‚°Ñ‚†Ä‚†Ä‚†à‚†ª‚†ø‚†ø‚†ü‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†è‚†Ä‚†Ä‚£∏‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£ø‚†ü‚†õ‚£ø‚£ß‚£∂‚£∂‚£∂‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£¶‚°Ä‚†Ä‚¢Ä‚£ø‚°á‚†Ä‚†Ä‚†à‚¢ª‚£ø‚£¶‚°à‚†â‚†ª‚£ø‚£∂‚°ø‚†ü‚†π‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£Ø‚°Ä‚†Ä‚£∞‚£ø‚†É‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†ü‚†õ‚†ô‚¢ø‚£¶‚£†‚°Ñ‚£∏‚£ø‚†ã‚†Ä‚£∏‚£ø‚†ø‚¢ø‚£∑‚°Ñ‚†Ä‚†à‚†õ‚†ø‚£ø‚£ø‚°ø‚¢ø‚£∂‚£§‚£§‚£æ‚†ü‚†π‚£ø‚£Ü‚†Ä‚†π‚£ø‚£Ñ‚†Ä‚†Ä‚†ò‚¢ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚£Ä‚£¥‚°ø‚†ã‚†ô‚¢ø‚£∑‚£ø‚†É‚†Ä‚†Ä‚£∞‚£ø‚†è‚†Å‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚†ü‚†É‚£ø‚°è‚†Ä‚¢∞‚£ø‚†É‚†Ä‚¢∞‚£ø‚¢á‚£Ä‚£Ä‚£§‚£æ‚°ø‚†ã‚¢†‚£Ä‚†à‚†ª‚£ø‚£á‚†Ä‚†Ä‚†ô‚£ø‚£Ü‚†Ä‚†ò‚¢ø‚£∑‚°Ä‚†Ä‚£®‚£ø‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä
                ‚£æ‚°ø‚†ã‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†è‚†Ä‚¢†‚£æ‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚°ü‚†Å‚†Ä‚¢Ä‚£ø‚£Ñ‚†Ä‚£æ‚°á‚†Ä‚†Ä‚£º‚°ø‚†∏‚†ø‚†õ‚£ø‚°á‚†Ä‚†Ä‚£æ‚£ø‚†Ä‚†Ä‚†ò‚£ø‚£Ü‚£Ä‚£§‚£æ‚£ø‚°Ñ‚†Ä‚†à‚†ª‚£ø‚£ø‚°ü‚†â‚†Ä‚†ô‚†õ‚¢ø‚£∑‚†Ä
                ‚¢ª‚£∑‚£§‚£¥‚£æ‚†ø‚†õ‚†Å‚†Ä‚£¥‚£ø‚†ã‚†ò‚†ø‚£∑‚£∂‚°á‚¢∏‚£ø‚£ß‚£§‚£¥‚£ø‚†õ‚†ø‚†ø‚£ø‚£ß‚£Ä‚£†‚£ø‚†É‚†º‚£∑‚£∂‚£ø‚°á‚†Ä‚£Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†õ‚†ã‚†Å‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£¶‚£Ñ‚£Ä‚£Ä‚£º‚£ø‚†Ä
                ‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚°ø‚†Å‚†Ä‚¢Ä‚£¥‚£ø‚†ã‚†Ä‚£º‚°è‚†â‚†â‚£ø‚°è‚†Ä‚†Ä‚†Ä‚†à‚†õ‚£ø‚£ø‚†ã‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°Ü‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†õ‚†õ‚†õ‚†Å‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°ø‚£ø‚£¶‚£†‚£æ‚†ü‚†Å‚†Ä‚¢Ä‚£ø‚†á‚†Ä‚†Ä‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£ß‚£§‚£Ä‚£º‚£ø‚†Å‚¢∏‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚†Ä‚†Ä‚†Ä‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚†è‚†Ä‚†à‚£ª‚£ø‚†è‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£∑‚£∂‚£∂‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†â‚†õ‚†õ‚£ø‚†á‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚£à‚£õ‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£Ü‚£§‚£∂‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚°è‚†Ä‚†Ä‚£º‚°ø‚†É‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚†á‚†Ä‚¢®‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚°ø‚†ø‚†ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚°è‚†Å‚†Ä‚¢ª‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚†ª‚£∑‚£¶‚£æ‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚£Ä‚£∞‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£∂‚£∂‚£¥‚£ø‚†Ä‚†Ä‚†ò‚£ø‚°á‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚°Ñ‚†Ä‚†Ä‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚¢∞‚£ø‚†É‚†Ä‚¢Ä‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†õ‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°à‚†â‚†â‚£ø‚°á‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚¢ª‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£¶‚£∂‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†∏‚£ø‚£¶‚£†‚£æ‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£∑‚£§‚£¥‚°ø‚†É‚†Ä‚†Ä‚¢ø‚£ø‚£Ä‚£§‚£∂‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°ü‚†â‚†â‚¢π‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚†Ä‚†Ä‚†ò‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°Ü‚†Ä‚†Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£¶‚£¥‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
                              üï∑ https://github.com/OxyopesLab/PhantomProbe üï∑
                                  üï∏Ô∏è [ PhantomProbe v1.0.0-stable ] üï∏Ô∏è
                                  ‚ô°  [  Yasin Saffari - Symbolexe ]  ‚ô° 
    """ + Style.RESET_ALL)

def sublist3r(domain):
    subprocess.run(['python3', 'subenum/sublist3r/sublist3r.py', '-d', domain], check=True)

def subfinder(domain):
    subprocess.run(['subenum/subfinder', '-d', domain, '-all'], check=True)

def assetfinder(domain):
    subprocess.run(['subenum/assetfinder', '-subs-only', domain], check=True)

def cero(domain):
    subprocess.run(['subenum/cero-linux-amd64', domain], check=True)

def xorn(domain):
    subprocess.run(['subenum/xorn/xorn', '-d', domain, '-w', 'subdomains.txt', '--status-code', '--title'], check=True)

def csprecon(domain):
    subprocess.run(['recon/csprecon', '-u', "https://" + domain], check=True)

def lazyrecon(domain):
    subprocess.run(['bash', 'recon/lazyrecon.sh', '-d', domain], check=True)

def arjun(domain):
    subprocess.run(['arjun', '-u', "https://" + domain, '--passive'], check=True)

def dnsrecon(domain):
    subprocess.run(['dnsrecon', '-d', domain], check=True)

def dnsenum(domain):
    subprocess.run(['dnsenum', domain], check=True)

def nmap(domain):
    subprocess.run(['nmap', '-Pn', '-sV', '--open', '-sC', domain], check=True)

def wafdetect(domain):
    subprocess.run(['python3', 'scanning/wafw00f/identYwaf.py', '--random-agent', domain], check=True)

def naabu(domain):
    subprocess.run(['content/naabu', '-host', domain], check=True)

def whatweb(domain):
    subprocess.run(['content/whatweb/whatweb', '-a3', '-v', domain], check=True)

def httpx(domain):
    subprocess.run(['content/subfinder', '-d', domain, "-o", "subs.txt"], check=True)
    subprocess.run(['content/httpx', '-title', '-status-code', '-list', 'subs.txt'], check=True)

def katana(domain):
    subprocess.run(['content/katana', '-u', "https://" + domain], check=True)

def raven(domain):
    subprocess.run(['content/raven', "https://" + domain], check=True)

def gau(domain):
    subprocess.run(['content/gau', domain], check=True)

def gospider(domain):
    subprocess.run(['content/gospider', "-q", "-s", "https://" + domain], check=True)

def testssl(domain):
    subprocess.run(['testssl', domain], check=True)

def waybackurls(domain):
    subprocess.run(['content/waybackurls', domain], check=True)

def gdork(domain):
    subprocess.run(['python3', 'content/gdork.py', domain], check=True)

def secretfinder(domain):
    subprocess.run(['python3', 'secrets/SecretFinder/SecretFinder.py', '-i', "https://" + domain + "/", '-e'], check=True)

def theharvester(domain):
    subprocess.run(['python3', 'emails/theHarvester/theHarvester.py', '-d', domain, '-b', 'brave,bing,crtsh,duckduckgo,hackertarget,yahoo,dnsdumpster'], check=True)

def httpsmuggling(domain):
    subprocess.run(['python3', 'vuln/smuggler/smuggler.py', '-u', domain], check=True)

def sqlinjection(domain):
    subprocess.run(['python3', 'vuln/sqlmap/sqlmap.py', '--url', "https://" + domain, '--random-agent', '--risk=3', '--level=5', '--dbs'], check=True)

def commandinjection(domain):
    subprocess.run(['python3', 'vuln/commix/commix.py', "https://" + domain], check=True)

def wordpress(domain):
    subprocess.run(['wpscan', '--url', "https://" + domain, '-e', 'u'], check=True)

def complete(text, state):
    commands = ["use", "set", "run", "back", "help", "exit"]
    options = [
        "subenum/sublist3r", 
        "subenum/subfinder", 
        "subenum/assetfinder",
        "recon/csprecon",
        "recon/lazyrecon",
        "dns/dnsrecon",
        "parameter/arjun",
        "dns/dnsenum",
        "subenum/cero",
        "subenum/xorn",
        "scanning/nmap",
        "scanning/wafdetect",
        "content/naabu",
        "content/whatweb",
        "content/httpx",
        "content/katana",
        "content/raven",
        "content/gau",
        "content/gospider",
        "content/waybackurls",
        "content/gdork",
        "ssl/testssl",
        "secrets/SecretFinder",
        "emails/theharvester",
        "vuln/httpsmuggling",
        "vuln/sqlinjection",
        "vuln/commandinjection",
        "vuln/wordpress"
    ]
    matches = [c for c in commands if c.startswith(text)] + [o for o in options if o.startswith(text)]
    return matches[state] if state < len(matches) else None

def print_help():
    help_text = """
PhantomProbe Commands:
    use <tool_name>      - Select a tool to use
    set <parameter> <value> - Set parameter value (e.g., set domain google.com)
    run                  - Run the selected tool with the set parameters
    back                 - Deselect the current tool
    help                 - Show this help message
    exit                 - Exit the PhantomProbe framework
"""
    print(Fore.CYAN + help_text + Style.RESET_ALL)

def main():
    display_banner()
    print(Fore.GREEN + "Welcome to PhantomProbe Framework!" + Style.RESET_ALL)
    readline.parse_and_bind("tab: complete")
    readline.set_completer(complete)
    readline.set_history_length(1000)
    history_file = os.path.expanduser('~/.phantomprobe_history')
    
    try:
        readline.read_history_file(history_file)
    except FileNotFoundError:
        pass
    
    tool_map = {
        "subenum/sublist3r": sublist3r,
        "subenum/subfinder": subfinder,
        "subenum/assetfinder": assetfinder,
        "subenum/cero": cero,
        "subenum/xorn": xorn,
        "recon/csprecon": csprecon,
        "recon/lazyrecon": lazyrecon,
        "parameter/arjun": arjun,
        "dns/dnsrecon": dnsrecon,
        "dns/dnsenum": dnsenum,
        "scanning/nmap": nmap,
        "scanning/wafdetect": wafdetect,
        "content/naabu": naabu,
        "content/whatweb": whatweb,
        "content/httpx": httpx,
        "content/katana": katana,
        "content/raven": raven,
        "content/gau": gau,
        "content/gospider": gospider,
        "content/waybackurls": waybackurls,
        "content/gdork": gdork,
        "ssl/testssl": testssl,
        "secrets/SecretFinder": secretfinder,
        "emails/theharvester": theharvester,
        "vuln/httpsmuggling": httpsmuggling,
        "vuln/sqlinjection": sqlinjection,
        "vuln/commandinjection": commandinjection,
        "vuln/wordpress": wordpress
    }
    
    selected_tool = None
    domain = None
    base_prompt = "[PhantomProbe]> "
    tool_prompt = None
    
    try:
        while True:
            prompt = tool_prompt if tool_prompt else base_prompt
            user_input = input(prompt).strip()
            
            if not user_input:
                continue
            
            tokens = user_input.split()
            command = tokens[0]
            
            if command == "use":
                if len(tokens) < 2:
                    print(Fore.RED + "Usage: use <tool_name>" + Style.RESET_ALL)
                    continue
                tool_name = tokens[1]
                if tool_name in tool_map:
                    selected_tool = tool_map[tool_name]
                    tool_prompt = f"[PhantomProbe][{tool_name.split('/')[-1]}]> "
                else:
                    print(Fore.RED + "Invalid tool name" + Style.RESET_ALL)
            elif command == "set":
                if len(tokens) < 3:
                    print(Fore.RED + "Usage: set <parameter> <value>" + Style.RESET_ALL)
                    continue
                parameter = tokens[1]
                value = tokens[2]
                if parameter == "domain":
                    domain = value
                    print(Fore.YELLOW + f"[*] DOMAIN => {domain}" + Style.RESET_ALL)
                else:
                    print(Fore.RED + "Invalid parameter" + Style.RESET_ALL)
            elif command == "run":
                if not selected_tool:
                    print(Fore.RED + "Please select a tool before running" + Style.RESET_ALL)
                elif not domain:
                    print(Fore.RED + "Please set a domain before running" + Style.RESET_ALL)
                else:
                    try:
                        selected_tool(domain)
                    except Exception as e:
                        print(Fore.RED + f"Error running tool: {e}" + Style.RESET_ALL)
            elif command == "back":
                selected_tool = None
                tool_prompt = None
            elif command == "help":
                print_help()
            elif command == "exit":
                print(Fore.GREEN + "Exiting PhantomProbe Framework. Goodbye!" + Style.RESET_ALL)
                break
            else:
                try:
                    subprocess.run(user_input, shell=True)
                except Exception as e:
                    print(Fore.RED + f"Error running system command: {e}" + Style.RESET_ALL)
    finally:
        readline.write_history_file(history_file)

if __name__ == '__main__':
    main()
